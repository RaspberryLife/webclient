// =============================================================================
// Optional parameters for java compilation
// =============================================================================

option java_package = "protobuf";
option java_outer_classname = "RblProto";

// =============================================================================
// General RBLMessage
// =============================================================================
message RBLMessage {

	// Range 1 - 20 : Message header
	required string id = 1;
	required MessageType mType = 2 [default = PLAIN_TEXT];
	optional int32 messageNumber = 3;

	// Range 21 - 30 : Basic messages
	optional PlainText plainText = 21;

	// Range 31 - 50 : Instruction messages
	optional RunInstruction runInstruction = 31;

	// Range 51 - 70 : Data operation messages

	optional RegisterDataField registerDataField = 51;
	optional UpdateDataField updateDataField = 52;
	optional DataSet dataSet = 53;
	optional GetDataSet getDataSet = 54;


	enum MessageType {
		PLAIN_TEXT = 0;
		REGISTER_INSTRUCTION_OBSERVER = 1;
		RUN_INSTRUCTION = 2;
		REGISTER_DATA_FIELD = 3;
		UPDATE_DATA_FIELD = 4;
		GET_DATA_SET = 5;
		DATA_SET = 6;

		// All Auth-Types use PlainText as message content
		AUTH_REQUEST = 7;
		AUTH_DENIED = 8;
		AUTH_ACCEPT = 9;
	}
// =============================================================================
// General
// =============================================================================

	// Plaintext subtype for general purpose
	message PlainText {
		required string text = 1;
	}

// =============================================================================
// Instruction subtypes
// =============================================================================

	message Instruction {
		// Name of the instruction
		required int32 instructionID = 1;
		repeated string stringParameters = 2;
		repeated int32 intParameters = 3;
	}

	message RunInstruction {
		required ModelType modeltype = 1;
		required int32 targetModulID = 2;
		required Instruction instruction = 3;
	}

	enum ModelType {
		MODULE_TEMP = 1;
		MODULE_OUTLET = 2;
	}

// =============================================================================
// Data subtypes
// =============================================================================

    //This defines the DataType that is used
    enum DataType {
	    INTEGER = 0;
	    FLOAT = 1;
	    STRING = 2;
    }

    message Data {
	    required DataType dType = 1;
	    //specify date as follows: "YYYY-MM-DD hh:mm:ss"
	    optional string dateTime = 2;
	    optional string stringData = 3;
	    optional int32 int32Data = 4;
	    optional float floatData = 5;
    }

    // Initial message to register a data field
    // See UpdateDataField on how to update data
    message RegisterDataField {
	    required string fieldName = 1;
	    required DataType dType = 2;
    }

    // Always update with the same DataType
    // Using a diffrent dataType will result in the server not reading it
    message UpdateDataField {
	    required string fieldName = 1;
	    required Data data = 2;
    }

    message GetDataSet {
	    required string modulID = 1;
	    required string fieldID = 2;

	    //leaving this empty will result in a fixed number of results e.g. 50
	    optional int32 count = 3;

	    //specify date as follows: "YYYY-MM-DD hh:mm:ss"
	    optional string startDateTime = 4;

	    // same as startDateTime
	    optional string endDateTime = 5;
    }

    message DataSet {
	    required string modulID = 1;
	    required string fieldID = 2;
	    repeated Data data = 3;
    }

} // close RBLMessage
