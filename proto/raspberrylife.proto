// =============================================================================
// Optional parameters for java compilation
// =============================================================================

option java_package = "protobuf";
option java_outer_classname = "RblProto";

// =============================================================================
// General RBLMessage
// =============================================================================
message RBLMessage {

	// Range 1 - 20 : Message header
	required string id = 1;
	required MessageType messageType = 2 [default = PLAIN_TEXT];
	required MessageFlag messageFlag = 3;
	optional int32 messageNumber = 4;

	// Range 21 - 30 : Basic messages
	optional PlainText plainText = 21;

	// Range 31 - 50 : Functional messages
	optional RunInstruction runInstruction = 31;
	optional Logic logic = 32;

	// Range 51 - 70 : Data operation messages
	optional DataSet dataSet = 51;
	optional User user = 52;


	// =============================================================================
	// Enumerations
	// =============================================================================

	enum MessageFlag{
		REQUEST = 0;
		RESPONSE = 1;
		DEBUG = 99;
	}

	enum MessageType {
		AUTH = 0;
		PLAIN_TEXT = 1;
		RUN_INSTRUCTION = 2;
		DATASET = 3;
		LOGIC = 4;

	}

	enum ModuleType{
		MODULE_OUTLET = 0;
		MODULE_TEMP = 1;
		MODULE_PIR = 3;
		MODULE_REED = 2;
		MODULE_LUMINOSITY = 4;
		MODULE_RELAY = 5;
		MODULE_PIR_AND_RELAY = 6;
	}

	enum CrudType {
		CREATE = 0;
		RETRIEVE = 1;
		UPDATE = 2;
		DELETE = 3;
	}

	enum ActuatorType {
		SYSTEM = 0;
		CLIENT = 1;
		MODULE = 2;
	}

	enum DataType {
		MODULE_LIST = 0;
		MODULE_DATA = 1;
		SYSTEM_DATA = 2;
		CLIENT_LIST = 3;
		CLIENT_DATA = 4;
	}

	enum ExecutionType {
		IMMEDIATELY = 0;
		MINUTELY = 1;
		HOURLY = 2;
		DAILY = 3;
		WEEKLY = 4;
		MONTHLY = 5;
	}

	enum ExecutionRequirement {
		SINGLE = 0;
		MAJORITY = 1;
		ALL = 2;
	}

	// =============================================================================
	// General
	// =============================================================================

	// Plaintext subtype for general purpose
	message PlainText {
		required string text = 1;
	}

	message Actuator {
		required ActuatorType actuatorType = 1;
		required int32 actuatorId = 2;
		optional string name  = 3;
	}

	// =============================================================================
	// Instruction subtypes
	// =============================================================================

	message Instruction {
		// Name of the instruction
		required int32 instructionId = 1;
		repeated string parameters = 2;

		// Module
		optional ModuleType moduleType = 20;
		optional int32 moduleId = 21;
	}

	message RunInstruction {
		required Actuator actuator = 1;
		required Instruction instruction = 2;
	}

	// =============================================================================
	// User subtypes
	// =============================================================================

	message User {
		required CrudType crudType = 1;
		required int32 id = 2;
		optional string name = 3;
	}

	// =============================================================================
	// Logic subtypes
	// =============================================================================

	message Logic {
		required CrudType crudType = 1;
		required int32 id = 2;
		required string name = 3;
		required ExecutionFrequency exeFrequency = 4;
		required ExecutionRequirement exeRequirement = 5 [default = SINGLE];
		repeated LogicInitiator logicInitiator = 6;
		repeated LogicReceiver logicReceiver = 7;
	}

	message LogicInitiator {
		required Actuator initiator = 1;
		required Condition condition = 2;
	}

	message LogicReceiver {
		repeated Actuator receiver = 1;
		required Instruction instruction = 2;
	}


	message Condition {
		required int32 fieldId = 1;
		optional int32 thresholdOver = 2;
		optional int32 thresholdUnder = 3;
		optional bool state = 4;
	}

	message ExecutionFrequency {
		required ExecutionType exeType = 1;
		optional int32 minute = 2; // 0 - 59
		optional int32 hour = 3; // 0 - 23
		optional int32 day = 4; // 0 - 6 starting monday
		optional int32 week = 5; // 0 - 3
	}

	// =============================================================================
	// Data subtypes
	// =============================================================================


	message Range {
		// Leaving this empty will result in a fixed number of results e.g. 50
		optional int32 count = 1;
		// Specify date as follows: "YYYY-MM-DD hh:mm:ss"
		optional string startDateTime = 2;
		// Same as startDateTime
		optional string endDateTime = 3;
	}

	message DataSet {
		required CrudType crudType = 1;
		required DataType dataType = 2;
		optional Actuator actuator = 3;
		optional int32 fieldId = 4;
		optional Range range = 5;
		optional Data data = 6;
	}



	message Data {
		repeated Actuator actuators = 1;
		repeated string stringData = 2;
		repeated int32 int32Data = 3;
		repeated float floatData = 4;
	}

	} // Close RBLMessage